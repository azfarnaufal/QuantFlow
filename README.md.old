# QuantFlow - Quantitative Trading Platform

QuantFlow is a comprehensive quantitative trading platform that provides real-time market data ingestion, machine learning predictions, sophisticated backtesting capabilities, and automated trading workflows. Built for cryptocurrency markets with a focus on Binance Perpetual Futures.

## üöÄ Key Features

### Real-time Market Data
- **Binance Perpetual Futures Integration**: WebSocket client for real-time price and volume data
- **Multiple Symbol Tracking**: Simultaneously track BTCUSDT, ETHUSDT, and other major pairs
- **High Performance**: Optimized WebSocket client with automatic reconnection and error handling

### Data Storage & Management
- **TimescaleDB Integration**: PostgreSQL-based time-series database for efficient data storage
- **Database Connection Pooling**: Optimized database connections for better performance
- **Redis Caching**: In-memory caching for frequently accessed data to reduce database load

### Advanced Analytics
- **Technical Indicators**: Comprehensive library including RSI, MACD, SMA, EMA, and Bollinger Bands
- **Machine Learning Predictions**: Simple ML models for price forecasting
- **Real-time Calculations**: On-the-fly technical indicator computation

### Sophisticated Backtesting Engine
- **Multiple Strategies**: 6+ built-in strategies including Moving Average, RSI, MACD, and Bollinger Bands
- **Enhanced Strategies**: Machine Learning and Portfolio strategies for advanced backtesting
- **Performance Metrics**: Comprehensive metrics including Sharpe ratio, max drawdown, and volatility
- **Walk-forward Analysis**: Robust strategy validation with rolling window testing
- **Strategy Comparison**: Side-by-side strategy performance evaluation
- **Transaction Cost Modeling**: Realistic backtesting with transaction costs

### Risk Management & Alerts
- **Multi-channel Notifications**: Telegram, Discord, and Email alerting system
- **Custom Alert Rules**: Configurable price and indicator-based alerts
- **Watchlist Management**: Track specific assets and conditions

### Workflow Automation
- **Node-RED Integration**: Visual workflow designer for complex automation
- **n8n Workflows**: Pre-built workflow templates for common tasks
- **Huginn Scenarios**: Advanced web automation and data processing

### Containerization & Deployment
- **Docker Support**: Containerized deployment for easy setup and scaling
- **Multi-container Architecture**: Separate services for database, caching, and application
- **Docker Compose**: Single-command deployment of the entire stack

## üìä Performance Optimizations

- **Redis Caching**: Frequently accessed data cached for faster retrieval
- **Database Connection Pooling**: Efficient database connection management
- **WebSocket Message Batching**: Batch processing for improved throughput
- **API Rate Limiting**: Prevent abuse and ensure fair resource usage
- **Health Check Endpoints**: Monitor system status and performance

## üõ†Ô∏è Technology Stack

- **Node.js**: Server-side JavaScript runtime
- **Express.js**: Web framework for REST API
- **WebSocket**: Real-time data streaming
- **TimescaleDB**: Time-series database (PostgreSQL extension)
- **Redis**: In-memory data structure store
- **Node-RED**: Visual tool for wiring together hardware devices, APIs and online services
- **n8n**: Extendable workflow automation tool
- **Huginn**: Agent-based automation tool
- **Docker**: Containerization platform

## üöÄ Quick Start

### Prerequisites
- Docker and Docker Compose
- Node.js (v14 or higher)
- npm (v6 or higher)

### Installation

1. Clone the repository:
```bash
git clone https://github.com/azfarnaufal/QuantFlow.git
cd QuantFlow
```

2. Start the services:
```bash
docker-compose up -d
```

3. Access the services:
- Main API: http://localhost:3000
- Node-RED: http://localhost:1880
- TimescaleDB: postgresql://localhost:5432

### API Endpoints

#### Market Data
- `GET /prices` - Get latest prices for all tracked symbols
- `GET /price/:symbol` - Get latest price for a specific symbol
- `GET /history/:symbol` - Get price history for a symbol

#### Backtesting
- `GET /backtest/strategies` - List available backtesting strategies
- `POST /backtest/run` - Run a backtest simulation

#### Health Check
- `GET /health` - System health status

## üìà Backtesting Strategies

QuantFlow includes several built-in backtesting strategies:

1. **Moving Average Crossover**: Traditional SMA crossover strategy
2. **RSI Reversal**: Mean reversion strategy based on RSI
3. **MACD Crossover**: Moving Average Convergence Divergence strategy
4. **Bollinger Bands**: Volatility-based trading strategy
5. **Momentum Strategy**: Trend-following strategy based on price momentum
6. **Mean Reversion Strategy**: Statistical arbitrage strategy
7. **Machine Learning Strategy**: ML-based prediction strategy
8. **Portfolio Strategy**: Multi-asset portfolio optimization strategy

## üéØ Advanced Features

### Performance Optimizations
- Redis caching for frequently accessed data
- Database connection pooling
- WebSocket message batching
- API rate limiting
- Health monitoring endpoints

### Containerization
- Multi-container Docker architecture
- Persistent data volumes
- Network isolation
- Restart policies

### Workflow Automation
- Node-RED visual programming interface
- Pre-built n8n workflows
- Huginn scenario templates
- API integration examples

## üìö Documentation

Detailed documentation is available in the [docs](./docs) directory:

- [Getting Started Guide](./docs/GETTING-STARTED.md)
- [Architecture Summary](./docs/architecture-summary.md)
- [Performance Optimizations](./docs/performance-optimizations.md)
- [Backtesting Enhancements](./docs/backtesting-enhancements.md)
- [Strategy Documentation](./docs/strategies/)
  - [ML Strategy](./docs/strategies/ml-strategy.md)
  - [Portfolio Strategy](./docs/strategies/portfolio-strategy.md)
- [Node-RED Integration](./docs/NODE-RED-INTEGRATION.md)
- [Deployment Guide](./docs/FINAL-SUMMARY.md)

## üß™ Testing

Run the test suite:
```bash
npm test
```

Run specific tests:
```bash
node tests/test-backtesting.js
node tests/test-ml-strategy.js
```

## ü§ù Contributing

1. Fork the repository
2. Create your feature branch (`git checkout -b feature/AmazingFeature`)
3. Commit your changes (`git commit -m 'Add some AmazingFeature'`)
4. Push to the branch (`git push origin feature/AmazingFeature`)
5. Open a pull request

## üìÑ License

This project is licensed under the ISC License - see the [LICENSE](LICENSE) file for details.

## üôè Acknowledgments

- Binance for providing excellent API documentation
- TimescaleDB for time-series database optimization
- Redis for in-memory data storage
- Node-RED community for workflow automation tools
- n8n team for workflow automation platform
- Huginn community for agent-based automation

## üìû Support

For support, please open an issue on GitHub or contact the maintainers.