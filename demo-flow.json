[
    {
        "id": "demo-flow",
        "type": "tab",
        "label": "Crypto Price Demo",
        "disabled": false,
        "info": "Simple demo flow showing how to use the crypto price tracker with Node-RED"
    },
    {
        "id": "inject-node",
        "type": "inject",
        "z": "demo-flow",
        "name": "Get Prices",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 100,
        "wires": [
            [
                "http-request"
            ]
        ]
    },
    {
        "id": "http-request",
        "type": "http request",
        "z": "demo-flow",
        "name": "Fetch Crypto Prices",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://localhost:3001/nodered/prices",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 350,
        "y": 100,
        "wires": [
            [
                "price-parser",
                "debug-raw"
            ]
        ]
    },
    {
        "id": "price-parser",
        "type": "function",
        "z": "demo-flow",
        "name": "Parse Prices",
        "func": "// Extract the price data for our main cryptocurrencies\nconst prices = msg.payload.data;\n\n// Create a formatted message\nmsg.payload = {\n    timestamp: msg.payload.timestamp,\n    btc: {\n        price: prices.BTCUSDT.price,\n        volume: prices.BTCUSDT.volume\n    },\n    eth: {\n        price: prices.ETHUSDT.price,\n        volume: prices.ETHUSDT.volume\n    }\n};\n\n// Return the message\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 100,
        "wires": [
            [
                "debug-formatted"
            ]
        ]
    },
    {
        "id": "debug-raw",
        "type": "debug",
        "z": "demo-flow",
        "name": "Raw Data",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 60,
        "wires": []
    },
    {
        "id": "debug-formatted",
        "type": "debug",
        "z": "demo-flow",
        "name": "Formatted Data",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 100,
        "wires": []
    }
]